build_form is the legacy form builder function provided in zc.dojoform.

It is reccomended that new application use build_form2, but we're maintaining
build_form for backwards compatibility for the time being.

Load a blank page that gets dojo loaded:

    >>> browser.get('http://localhost:%s/test/blank.html' % port)

Load zc.dojo:

    js> dojo.require('zc.dojo')

We use a basic example of form generation using a form definition retrieved
from the server. This will also test our ajax wrappers:

::

        var success_handler = function (res) {
            if (res.success && res.message) {
                zc.dojo.alert('Success!', res.message);
            }
        };

        var actionify_buttons = function (config, success_handler) {
            dojo.forEach(config.definition.actions, function (action) {
                dojo.connect(dijit.byId(action.name), 'onClick', function () {
                    if (action.name == 'ExampleForm.actions.validate') {
                        if (!dijit.byId(config.definition.prefix).validate()) {
                            return;
                        }
                    }
                    zc.dojo.submit_form({
                    url: action.url,
                    form_id: config.definition.prefix,
                    task: 'Submitting Form',
                    success: success_handler
                    });
                });
            });
        };

        var createForm = function (form_data) {
            zc.dojo.build_form(form_data, dojo.create('div', {}, dojo.body()));
            actionify_buttons(form_data, success_handler);
            dijit.byId(form_data.definition.prefix).startup();
            ready = true;
        };

        ready = false;
        zc.dojo.call_server({
            url: '/get_form',
            task: 'Loading Form',
            success: createForm
        });

.. -> js

    >>> JS(js)

    >>> while not JS('return ready'):
    ...     continue

We will confirm the form rendered as expected:

    >>> matches(browser.get_page_source(), read_test_file('1_legacy.html'))

We can also try to submit the form.

    js> dijit.byId('ExampleForm.actions.register').onClick()

    >>> attempt = 0
    >>> import time
    >>> while 1 and attempt < 5:
    ...     try:
    ...         browser.find_element_by_id('dijit_form_Button_0')
    ...     except:
    ...         attempt += 1
    ...         time.sleep(0.1)
    ...         continue
    ...     else:
    ...         break
    <selenium.webdriver.remote.webelement.WebElement object at ...>

    js> return dojo.query('.dijitDialog').length
    1

    js> return dojo.byId('dijit_Dialog_0_title').innerHTML
    u'Success!'

    js> dijit.byId('dijit_form_Button_0').onClick()

Form submission worked as expected, as did the dialog mechanism.
