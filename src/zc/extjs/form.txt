Form Processing
===============

zc.ext.form provides support for server-generated EXT forms based on
the zope.formlib library.

Forms are meant to be used as parts of larger applications.  A form
provides output of JSON data for building Ext forms.  Forms also
provide validation and call actions with validated data to perform
actions on form submit.

To create a form, just create a form class as a subclass of
zc.extjs.form.Form. This base class provides:

- an ajax __call__ method that retuirns a form definition,

- traversal to form actions, in much the same way that
  zc.extjs.application.Application [#application]_ provides traversal
  to json methods,

- a definitions method that can be used by ajax methods to get a form
  definition as Python data, and

- a getObjectData method for getting initial form data from an
  existing object.

Here's a simple example:

.. include:: form_example.py
   :literal:

Note that we've nested our form definition in an application.  We can
define the form class elsewhere and use it, but if a form is only used
in an application, then it's often easiest to define it within an
application class.  Forms are instantiated by calling them with a
single argument.  This argument becomes the form's page attribute.
Form classes are automatically instantiated when a form class is
assigned to an attribute in a class and accessed through an instance
[#form_classes_are_descriptors]_.

Let's try accessing our form:

    >>> import zope.testbrowser.testing
    >>> from zc.extjs.testing import print_form
    >>> browser = zope.testbrowser.testing.Browser()
    >>> browser.addHeader('Authorization', 'Basic bob:123')
    >>> print_form(browser, 'http://localhost/form.html/Form')
    ... # doctest: +NORMALIZE_WHITESPACE
    {u'definition': {u'actions': [{u'label': u'Register',
                                   u'name': u'Form.actions.register',
                                   u'url': u'Form/register'}],
                     u'widgets': [{u'fieldHint': u'Given name.',
                                   u'fieldLabel': u'First name',
                                   u'id': u'Form.first_name',
                                   u'itemCls': u'zc-required-field',
                                   u'minLength': 0,
                                   u'name': u'Form.first_name',
                                   u'xtype': u'textfield'},
                                  {u'fieldHint': u'Family name.',
                                   u'fieldLabel': u'Last name',
                                   u'id': u'Form.last_name',
                                   u'itemCls': u'zc-required-field',
                                   u'minLength': 0,
                                   u'name': u'Form.last_name',
                                   u'xtype': u'textfield'},
                                  {u'fieldHint': u'',
                                   u'fieldLabel': u'Favorite color',
                                   u'id': u'Form.favorite_color',
                                   u'minLength': 0,
                                   u'name': u'Form.favorite_color',
                                   u'xtype': u'textfield'},
                                  {u'allowBlank': False,
                                   u'fieldHint': u'Age in years',
                                   u'fieldLabel': u'Age',
                                   u'field_min': 0,
                                   u'id': u'Form.age',
                                   u'itemCls': u'zc-required-field',
                                   u'name': u'Form.age',
                                   u'widget_constructor':
                                    u'zc.extjs.widgets.InputInt'}]},
     u'success': True}

Our application is at: "http://localhost/form.html". The form is
exposed as an ajax method named "Form", which comes from the attribute
name in the class definition.

The form definition contains both action definitions and widget
definitions. The widget definitions may be full ext field definitions
or name a widget_constructor, which is a Javascript helper provided by
the zc.extjs resource library that provides additional information,
like Javascript validators, that can't be expressed in JSON.

The're an action definition for each action defined in the form.  The
action information includes the url to post the result to, reletive to
the application.  

Let's post a result back:

    >>> browser.handleErrors = False
    >>> print_form(browser, 'http://localhost/form.html/Form/register',
    ...            {'Form.first_name': 'Bob', 
    ...             'Form.last_name': 'Zope',
    ...             'Form.favorite_color': '',
    ...             'Form.age': '',
    ...             })



.. [#application] See application.txt

.. [#form_classes_are_descriptors] Form classes are also
   descriptors. They get called with the instance they're accessed
   through.
